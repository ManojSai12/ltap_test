import os
import numpy as np
import pandas as pd
from skimage import io

# Define the directories for composite and binary images
composite_dir = "path_to_composite_images_folder"
binary_dir = "path_to_binary_images_folder"

# Create an empty DataFrame to store results
results_df = pd.DataFrame(columns=["MonthYear", "PixelDifferences"])

# Loop through the years (2000 to 2023)
for year in range(2000, 2024):
    for month in range(1, 13):
        # Skip specific months that you don't have images for
        if year == 2000 and month == 1:
            continue
        if year == 2023 and month in [9, 10, 11, 12]:
            continue

        # Create file paths for the composite and binary images
        composite_path = os.path.join(composite_dir, f"{year}_{month:02d}_composite.png")
        binary_path = os.path.join(binary_dir, f"{month:02d}{year}_mask.TIFF")

        if not os.path.exists(composite_path) or not os.path.exists(binary_path):
            print(f"Images not found for {year}-{month:02d}, skipping...")
            continue

        # Load images using skimage
        composite_image = io.imread(composite_path)
        binary_image = io.imread(binary_path)

        # Check if image dimensions match
        if composite_image.shape != binary_image.shape:
            print(f"Image dimensions do not match for {year}-{month:02d}, skipping...")
            continue

        # Calculate pixel differences
        pixel_differences = np.abs(composite_image - binary_image)

        # Calculate the month-year value (e.g., "012023" for January 2023)
        month_year = f"{month:02d}{year}"

        # Store pixel differences as a flattened 1D array
        flattened_differences = pixel_differences.flatten()

        # Append the result to the DataFrame
        results_df = results_df.append({
            "MonthYear": month_year,
            "PixelDifferences": flattened_differences.tolist()
        }, ignore_index=True)

# Save the results to a CSV file
results_df.to_csv("pixel_differences.csv", index=False)

# Display the results
print(results_df)
