from skimage import io

# Create an empty list to store the loaded images
mask_images = []

for i in range(1, 24):
    filename = f"mask_{i:02d}.tif"
    image = io.imread(filename)
    mask_images.append(image)




from skimage import img_as_ubyte, img_as_bool
from skimage.morphology import binary_erosion, binary_dilation

# Convert the images to boolean type (0 for black, 1 for white)
mask_images = [img_as_bool(image) for image in mask_images]

# Create an empty array with the same shape as the first mask image
composite_image = mask_images[0].copy()

# Iterate through the mask images and combine them
for mask in mask_images:
    composite_image = binary_dilation(composite_image, mask)

# Convert the composite image back to uint8 format
composite_image = img_as_ubyte(composite_image)

# Save the composite image
io.imsave("composite.tif", composite_image)
----------------------------------------------------------------------------------------------------------------




import os
import numpy as np
from skimage import io

# Define the directories for composite and binary images
composite_dir = "path_to_composite_images_folder"
binary_dir = "path_to_binary_images_folder"

# Create a dictionary to store occurrences of 255 for each year
yearly_255_counts = {}

# Define the threshold for classifying cloudy areas (adjust as needed)
cloudy_threshold = 1000  # Example threshold, adjust as per your data

# Loop through the years (2000 to 2023)
for year in range(2000, 2024):
    # Initialize the count for the current year to 0
    yearly_255_count = 0

    for month in range(1, 13):
        # Skip specific months that you don't have images for
        if year == 2000 and month == 1:
            continue
        if year == 2023 and month in [9, 10, 11, 12]:
            continue

        # Create file paths for the composite and binary images
        composite_path = os.path.join(composite_dir, f"{year}_{month:02d}_composite.png")

        try:
            # Construct the corresponding binary image filename
            binary_filename = f"{month:02d}{year}_mask.TIFF"
            binary_path = os.path.join(binary_dir, binary_filename)

            # Load images using skimage
            composite_image = io.imread(composite_path)
            binary_image = io.imread(binary_path)

            # Check if image dimensions match
            if composite_image.shape != binary_image.shape:
                print(f"Image dimensions do not match for {year}-{month:02d}, skipping...")
                continue

            # Compare each pixel in the composite and binary images
            for x in range(composite_image.shape[0]):
                for y in range(composite_image.shape[1]):
                    if composite_image[x, y] == 255 and binary_image[x, y] == 255:
                        yearly_255_count += 1

        except FileNotFoundError:
            print(f"Images not found for {year}-{month:02d}, skipping...")

    # Store the yearly count in the dictionary
    yearly_255_counts[year] = yearly_255_count

# Determine cloudy and cloud-free years based on the threshold
cloudy_years = [year for year, count in yearly_255_counts.items() if count > cloudy_threshold]
cloud_free_years = [year for year, count in yearly_255_counts.items() if count <= cloudy_threshold]

# Display the cloudy and cloud-free years
print("Cloudy years:", cloudy_years)
print("Cloud-free years:", cloud_free_years)

